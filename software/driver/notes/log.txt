-------------------------
Experiment:
- How to reduce latency from the detection of the fifop flag to the beginning
  of the SPI transaction.

Hypothesis:
- We are currently using a worker_queue, scheduling the entire SPI operation
  inside this. By calling a spi_async operation instead we might be able to
  reduce the latency significantly.

Data:
- Current latency using worker_queue: 190uS, 120uS, 106uS, 111uS, 110uS
- New latency using async_spi: 91uS, 75uS, 94uS, 73uS, 80uS

Conclusions:
- Improved results! ~100% faster.
- Scheduling a worker_queue and then calling spi_sync likely actually
  resulted in a double worker_queue scheduling, with some overhead to
  init some locks and flags. Doing it this way effectively cut
  one operation out of the process.

-------------------------
Low Power Listening:
- Luckily we don't have to implement the receiving parts of LPL. Just the automatic retried sending. 

Software Ack:
- This layer should sit at the top and basically look at all the packets
  being sent/recieved. Block on non-broadcast sent packets, auto send acks for received packets.


read() Operation:
- If no received packet, block if BLOCKING, else return -EAGAIN
- If packet in buffer, return instantly

From Write Call:
- Spinlock rx_status flag, if ~IDLE set to BUSY.
- Setup bookkeeping and call software_ack_begin
- Call semaphore_down()

From Software Ack:
- Call LPL.send
- 

From LPL:
- Repeatedly send packet
- Wait for stop sending




write() Operation:
- If packet in tx buffer (called from another thread?), block if BLOCKING, else return -EAGAIN
- If no packet, block until packet fully transmitted, or timeout occurs. 

////////// Things Needed ///////////
- Random Collision Control
- Low Power Listening
- Software Acknowledgment

Notes on Software Acknowledgment:

Send:
==========================
begin
--------------------------
- spi_async the send.
- save callback
- setup hr_timer callback (1ms) in the future

hr_timer cb
----------------------------
- call upper layer tx_cb with failed. 


Receive (IDLE):
==========================
begin
-----------------------
- if is ACK packet of current TX packet:
-- call upper layer tx_cb with success
- else:
-- if message requires ack:
--- spi_async the send. 
-- call upper layer rx_cb with packet 


Ieee154MessageLayer
TinyosNetworkLayer
UnqiueLayer (Send)
PacketLinkLayer (PacketAcknowledgements <- SoftwareAck)
LowPowerListening (PacketAcknowledgements <- SoftwareAck)
MessageBufferLayer
UniqueLayer(RadioReceiver)
CollisionAvoidance
SoftwareAck
TrafficMonitor
Driver

----------------------------------
Events:

Transmit Protocol
0) Build tx packet
1) Spin radio lock, if idle set state to TX, unlock
2) Turn off receiving
3) Shoot out tx packet
4) Spin radio lock, set state to IDLE, unlock
5) Wait for ack packet

Receive Protocol
On SFD Received:
0) Spin radio lock, if idle set state to RX, else drop packet and return, unlock
1) Receive packet
2) Copy to radio rx buffer
3) Call receive_process
3) Spin radio lock, set state to IDLE

Receive Process
- If packet ACK & matches current TX packet: up(tx_sem)
- If packet DATA & requires ACK: schedule TX ack.

----------------------------------

TxLock: Process Context 
------------------
lock()
while (state != IDLE) {
	unlock()
	lock()
}
state = TX;
unlock()


TxRelease: 
------------------
lock()
state = IDLE;
unlock()

RxLock:
------------------
lock()
if (state != IDLE) {
	unlock();
	return;
}
state = RX;
unlock()

RxRelease:
------------------
lock()
state = IDLE
unlock()


----------------------------------

Send/Receive Interface

tx(u8 *buf, u8 len, void *cb(void))
attach_txdone


attach_rx(void *cb(void))

attach_sub_tx(void tx*(u8 *buf, u8 len))


rx(u8 *buf, u8 len)

struct layer_iface {
	task tx
	event tx_done
	event rx
}

call_event(layer_iface * iface, enum func)
call_task(layer_iface * iface, enum func)

----------------------------------

Low Power Listening & Software Acknowledgements

LPL Sleep Listening Period = 512 jiffies, ~15ms
Blip L2 Retries: 5
Blip L2 Delay: 103, ~3ms

============================================
============================================
Some thoughts on spin_locks vs. standard
scheduler-based synchronization constructs

TODO:
Right now the inner layers of the radio driver are using spin-lock
based synchronization. I did this because most of the radio's events
are interrupt-driven, thus they preempt the main execution context,
and because most spinlocks should be held for only a few hundred
microseconds. It remains to be seen whether the kernel's scheduler
could do a better job. A lot of times spinlocks are a really poor
choice.

TODO:
Handle statuses and actually catch some common error conditions.

============================================
============================================

ToDo Still:
- Implement Carrier Sense in a separate layer
- Implement CSMA random backoffs in a separate layer
- Finish software ACK support (TX hrtimer timeout)
- Implement LPL in a separate layer
- Filter nonunique packets
- Implement timestamping?


--------------------------
Low Power Listening <- Request retransmission of packets not ACKed
--------------------------
Random Collision Avoidance / CSMA <- Retry a few times, avoid EBUSY, if
    the channel is busy (CCA) then wait inital backoff, and then collision
    backoff for a clear channel. 
--------------------------
Software Acks <- Auto-send ACKs for RX packets, timeout/wait for TX packets
--------------------------
Carrier Sense <- Return EBUSY if channel busy.
--------------------------

============================================
============================================

transmitInterval - how long we should transmit the packet for.
listenLength - milliseconds the mote should turn on to check for incoming messages. Performed at every localWakeInterval
localWakeInterval - how often the mote will wakeup and listen for incoming messages. 


Low Power Listening Implementation:
-----------------------------------
Receiving packets is almost exactly the same as before, we receive the
packet, and pass it to the upper layer.

Transmitting packets is where things get a little tricky. From what I 
can tell TinyOS is structured such that any packet can specify its own
remote wakeup interval. That's fine, but not used in practice. I think
all we really need to do is setup a single parameter, remoteWakeupInterval,
and use that. Determining the proper interval is going to be a little tricky
however. We'll expose it as an IOCTL. The trick comes from the fact that LPL
is intertwined with CSMA, which will cause packets to backoff for an
indeterminate amount of time when faced with congestion. 

From what I can determine this is just a tradeoff you make. Packets are 
going to be dropped in the face of congestion and LPL. Maybe the best
solution is to extend the LPL receive window. Is the idea that upon
detecting energy in the channel we should wake up for a period of time
until energy has left the channel? 

I think at the very least we extend the LPL window a little bit to ensure an
extra transmission is made at the end, this way when there is no channel 
contention even if the receive detects channel energy at the very end of the
transmit it will still receive a packet. 

New Variables:
- transmitWindowLength - how long we will continuously attempt to
    retransmit a packet before giving up. 

CSMA Implementation:
--------------------
CSMA is a pretty simple thing to implement. It sounds like the primary
goal is to check the CCA flag before starting to send, if the channel
isn't clear we wait a random amount of time, bounded by an initial 
backoff period. We then check for the CCA flag additional times
and wait a lessor random amount of time between this. This effectively
prioritizes the transmission of our signal. 

New Variables:
- backoffMin - the minimal backoff time
- initalBackoffMax - how long we will backoff at most. 
- continuousBackoffMax - how long we will backoff at most subsequently.

Software Ack Implementation:
----------------------------
Soft-ack is also really simple to implement. For transmitted packets,
if they require an ACK wait the timeout period after sending to receive
an ack, if non is received bubble that error up to the application
level.

For received packets, if they require an ACK, send it immediately while
still maintaining exclusive rights to transmit. 

New Variables:
- softAckTimeout - the soft-ack timeout value. Also together with
    the length of the packet determines the transmit window. 

Unique Implementation:
----------------------
Filters out packets the other layers have already seen.

Sits between Soft-Ack and upper layers. If packet has
already been seen then don't report it to the upper layers,
allows the radio to ACK it again if needed. 

Timestamping Implementation:
----------------------------
TBD. Most likely an ioctl setting a magic byte that is prepended
to the header. 

Interactions Between All Things:
--------------------------------
Things get layered like this:

- characterDriver
- unique
- lpl
- csma
- soft-ack
- radio

Some interesting interactions between layers:

- csma backoffs effect the retransmission of packets with lpl and the
  ability for remote receivers to detect them. 
- lpl's listen length is determined by the soft-ack period and the
  values for csma back off. 
- this means that with a very busy channel lpl could possibly fail?
-- Upon lpl detecting channel energy it will start a 'listen period'.
   I think this listen period proceeds whether it does or doesn't receive
   a packet. If the transmitter is blocked by a busy channel for the 
   duration of the transmission it will be unable to receive a message
   and a retry attempt will have to be made. 

Propagating Errors and Concurrency:

- All errors should propagate through tx_done messages (rx errors don't really
  matter)
- Only a single packet is to be transmitted at a time, non of this stuff
  really pipelines well, it all requires only one packet. 
- The character driver layer uses a semaphore to transmit, and will
  block if another thread attempts to transmit or receive a packet.
- The radio, because it really takes almost no time to receive/transmit 
  a packet, will spinlock and wait for RX to finish or another TX to 
  complete. 
- Most layers will pretend they will only ever see a single transmit
  happen simultaneously. 
- The character driver will return a EBUSY flag if two subsequent
  transmissions are attempted from separate threads.
- Because there's really next to no overhead or complexity
  from RX we will simply allow it to randomly happen.
- Possible double-buffering of the RX layer to allow for a read to
  happen while another packet is being received. 


ToDo:
- Measure software ack latency.

IMPORTANT IMPLEMENTATION DETAIL:
--------------------------------
The len field in the tx and rx_done callbacks MUST correspond
EXACTLY with the number of bytes in the buffer being returned.

The buffers MUST include the length byte, which will be one
less than the len value in the case of a RX (the last two bytes
which usually are the FCS, will be replaced by CC2520-specific
fields however), or one more than the len value in the case of
a TX (the last two bytes are missing, the len value includes
the length field, while the length field itself does not. -1 + 2 = 1).
 
Awful Terrible CSMA Bug:
-------------------------
Hypothesis: LPL TX calling top->tx_done is breaking things. 

What we know:

What is the big difference between enabling CSMA?
- tx is randomly delayed.
- tx is called from a hrtimer interrupt
- tx_done is sometimes called from a hrtimer interrupt

Other things to note:
- csma_tx should NEVER be called while a tx is in progress. interface semaphore should be blocking.

BUG FIXED! =)










